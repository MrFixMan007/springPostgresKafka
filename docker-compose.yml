services:
  postgres_db:
    build:
      context: ./postgres_db
    container_name: postgres
#    image: postgres:12
    environment:
      - POSTGRES_USER=${POSTGRESUSER}
      - POSTGRES_PASSWORD=${POSTGRESPASSWORD}
      - POSTGRES_DB=${POSTGRESDB}
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - spring-postgres
      - pgadmin-bd
    restart: always
    env_file:
      - .env
    
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    depends_on:
      - postgres_db
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PgAdmin_email}
      - PGADMIN_DEFAULT_PASSWORD=${PgAdmin_password}
    networks:
      - pgadmin-bd
    ports:
      - "5050:80"
    restart: always
    env_file:
      - .env

  data-service:
    build:
      context: ./data_service
    depends_on:
      - api-service
    container_name: 'data-service'
    networks:
      - spring-postgres
      - kafka-data-service-network
      - services
    ports:
      - "8081:8080"

  api-service:
    build:
      context: ./api_service
    networks: 
      - kafka-api-service-network
      - services
    depends_on:
      - kafka
    container_name: 'api-service'
    ports:
      - "8082:8090"


#  test-api-service:
#    build:
#      context: ./test_api_service
#    depends_on:
#      - kafka
#    container_name: 'java-app_test_api_service'
#    ports:
#      - "8083:8080"
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kafka-zookeeper
      
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - kafka-data-service-network
      - kafka-api-service-network
      - kafka-zookeeper
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    expose:
      - "9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    container_name: kafka
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    expose:
#      - "9093"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    networks:
#      - kafka-data-service-network
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
#      KAFKA_CREATE_TOPICS: "student-topic:2:1"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    depends_on:
#      - zookeeper
#    command: >
#       "sleep 30 &&
#       kafka-topics --create --bootstrap-server kafka:9092 --partitions 2 --replication-factor 1 --topic student-topic"


networks:
  spring-postgres:
  pgadmin-bd:
  kafka-data-service-network:
  kafka-zookeeper:
  kafka-api-service-network:
  services: